{
    "contents" : "require(raster)\nrequire(rgdal)\nrequire(sp)\nrequire(ggplot2)\n\nmakeLatLong <- function(dir,fi){\n  ##Reads in a shape, then transforms to a common projection\n  layer <- readOGR(dir, layer=fi)\n  layer <- spTransform(layer,CRS(\"+proj=longlat +datum=WGS84 +no_defs +ellps=WGS84 +towgs84=0,0,0\"))\n  return(layer)\n}\n\ngetRasterAsDF <- function(fiName,layername){\n  ba <- raster(fiName)\n  ##Then extract data with an x and a y column\n  ba <- as.data.frame(ba,xy=TRUE)\n  ba <- getLatLong(ba,layername)\n}\n\ncreatePtsFromRaster_maskShape <- function(name,shp=NA,minValue=0){\n  ##Takes a shapefile (ogr format) and a path to a raster\n  print(\"Reading in raster\")\n  txRaster <- raster(name)\n  if(is.na(shp)==FALSE){\n    txRaster <- clipRasterWithShape(txRaster,shp)\n  }\n  print(\"Converting raster to points dataframe\")\n  txRaster <- rasterToPoints(txRaster,fun=function(x){x>minValue})\n  txRaster <- data.frame(txRaster)\n  colnames(txRaster) <- c('x','y','dataIn')\n  return(txRaster)\n}\n\nclipRasterWithShape <- function(raster,shp){\n  myraster.crop <- crop(myraster,extent(myshp),snap='out')##shrinking raster with a rough estimate\n  crop <- setValues(myraster.crop,NA)##Create a new shapefile with values all NA\n  myshp.r <- rasterize(myshp,crop)##Rasterize new shapefile\n  myraster.masked <- mask(myraster.crop,myshp.r)##Use crop.raster to mask raster\n  return(myraster.masked)\n}\n\nshapeToDataFrame <- function(shape){\n  ##Now we want to extract the data for ggplot plotting\n  shape@data$id = rownames(shape@data)\n  shape.points = fortify(shape,region='id')\n  test2 <- join(shape.points,shape@data,by='id')\n  return(test2)\n}\n\ndissolveShape <- function(shapeData,byName){\n  #This function dissolves a shapefile by a column in the shapefile data structure (byName)\n  ##First we dissolve\n  cmd <- paste0('unionSpatialPolygons(shapeData,ID=shape@data$',byName,')')\n  reg4 <- eval(parse(text=cmd))\n  #reg4 <- unionSpatialPolygons(shape,ID=shape@data$NEMS)\n  ##Then we need to create a dataframe with the same name as the polygons in the dissolved object (byName)\n  cmd2 <- paste0('as.data.frame(unique(shapeData@data$',byName,'),stringsAsFactors=FALSE)')\n  reg4.data <- eval(parse(text=cmd2))\n  #reg4.data <- as.data.frame(unique(shape@data$NEMS),stringsAsFactors=FALSE)\n  ##Then we want to assign a name to the dissolved by value\n  colnames(reg4.data) <- byName\n  ##THen we have to set the rownames for the new dataframe\n  rownames(reg4.data) <- eval(parse(text=paste0('reg4.data$',byName)))\n  ##Then we create the SpatialPolygonsDataFrame (same object as original \"shapeData\")\n  test <- SpatialPolygonsDataFrame(reg4,reg4.data)\n  return(test)\n}\n\nreadShapeForDF <- function(path,name){\n  ##Reads in a shape file, then converts to points dataframe\n  val <- readOGR(path,name)\n  val@data$id = rownames(val@data)\n  val.points = fortify(val,region='id')\n  val.df = join(val.points,val@data,by='id')\n  return(val.df)\n}\n\nrgb2 <- function(red,green,blue){\n  red <- red/255\n  green <- green/255\n  blue <- blue/255\n  return(rgb(red,green,blue))\n}\n\nmapTheme <- theme_bw()+\n  theme(panel.border=element_blank(),\n        panel.grid=element_blank(),\n        axis.text=element_blank(),\n        axis.text=element_blank(),\n        axis.ticks=element_blank(),\n        axis.title=element_blank(),\n        legend.key=element_blank())\n\nmapTheme2 <- theme_bw()+\n  theme(panel.border=element_blank(),\n        panel.grid=element_blank(),\n        axis.text=element_blank(),\n        axis.text=element_blank(),\n        axis.ticks=element_blank(),\n        axis.title=element_blank())\n",
    "created" : 1425221246947.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "2035208489",
    "id" : "415C1FA4",
    "lastKnownWriteTime" : 1425223367,
    "path" : "~/_RWork/GISTutorials/GISHelpers.R",
    "project_path" : "GISHelpers.R",
    "properties" : {
        "tempName" : "Untitled1"
    },
    "source_on_save" : true,
    "type" : "r_source"
}