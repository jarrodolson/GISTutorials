{
    "contents" : "<html>\n\n<head>\n<title>GIS Tutorial 1</title>\n</head>\n\n<body>\n\n<h1>Reading in Data with Points and Shapes</h1>\n<p>In this tutorial, we walk through loading both shape files and points data and plot it using ggplot2. Once in the proper form, ggplot2 allows for incredible options in plotting data, but it can be a bit of a challenge.</p>\n<p>First, we will read in our libraries.</p>\n\n<!--begin.rcode\nrequire(ggplot2)\nrequire(rgdal)\nrequire(sp)\nrequire(raster)\nrequire(plyr)\nend.rcode-->\n\n<p>Next, we will load in our shape file using the readOGR function of rgdal.</p>\n<!--begin.rcode label='loadShape'\nshp <- readOGR(\"C:/users/jarrodanderin/Documents/_RWork/_Datasets/tl_2010_us_state10\",'tl_2010_us_state10')\nend.rcode-->\n\n<p>We can use R's base plotting to check if it read in.</p>\n\n<!--begin.rcode fig.width=8, fig.height=8\nplot(shp)\nend.rcode-->\n\n<p>Obviously, we've got some awkward white space, affected by part of Alaska crossing into the right hand side of the map. Additionally, the data structure is not conducive to plotting. We need to turn it into a dataframe object to make it easier to work with. Additionally, it should be in a common projection with our points.</p>\n\n<p>Each polygon contains an attribute table, which can be accessed by looking at shp@data.</p>\n\n<!--begin.rcode\nhead(shp@data)\nend.rcode-->\n\n<p>We can now see that we have state names, and can just drop the non-continental US.</p>\n\n<!--begin.rcode\nshp <- shp[shp$NAME10!=\"Alaska\" & shp$NAME10!='Hawaii' & shp$NAME10!=\"Puerto Rico\",]\nend.rcode-->\n\n<!--begin.rcode\nshp <- spTransform(shp,CRS(\"+proj=longlat +datum=WGS84 +no_defs +ellps=WGS84 +towgs84=0,0,0\"))\nshp@data$id <- rownames(shp@data)\nshp.points = fortify(shp,region='id')\nshp.df = join(shp.points, shp@data, by='id')\nhead(shp.df)\nend.rcode-->\n\n<p>Now let's plot it using ggplot2 to see how we did</p>\n\n<!--begin.rcode fig.width=8,fig.height=8\nggplot()+\n  geom_polygon(data=shp.df,aes(long,lat,group=group),fill=NA,color='black')\nend.rcode-->\n\n<p>Obviously we are able to see that the map is now of just the United States. Looking at some of the options we used to plot, we see that we made a pretty boring plot. Also, we use a lot of grey with the base theme for ggplot. To avoid distortion, we use the command coord_fixed() to fix the coordinates with the actual map coordinates. Below, we add some features and get rid of formatting we don't need.</p>\n\n<!--begin.rcode fig.width=8, fig.height=5\nggplot()+\n  geom_polygon(data=shp.df,aes(long,lat,group=group,fill=NAME10),color='black')+\n  ggtitle(\"Map of the United States\")+\n  theme_bw()+\n    theme(panel.border=element_blank(),\n        panel.grid=element_blank(),\n        axis.text=element_blank(),\n        axis.text=element_blank(),\n        axis.ticks=element_blank(),\n        axis.title=element_blank(),\n        legend.position='none')+\n  coord_fixed()\nend.rcode-->\n\n<p>Let's say for lack of something better to do, we wanted hot pink, visible borders. We change the polygon color (hot pink is #ff694b in the html color scale) and size (to 3, which is quite large). Also, for future use, we save the theme as a shortcut.</p>\n\n<!--begin.rcode fig.width=8, fig.height=5\nmapTheme <- theme_bw()+\n    theme(panel.border=element_blank(),\n        panel.grid=element_blank(),\n        axis.text=element_blank(),\n        axis.text=element_blank(),\n        axis.ticks=element_blank(),\n        axis.title=element_blank(),\n        legend.position='none')\nggplot()+\n  geom_polygon(data=shp.df,aes(long,lat,group=group,fill=NAME10),color='#ff694b',size=3)+\n  ggtitle(\"Map of the United States\")+\n  mapTheme+\n  coord_fixed()\n\nend.rcode-->\n\n<p>Now that we have a map that we can fiddle with, we can think about doing a better job with the map. As you can see, the map combines Michigan, hiding the Great Lakes, which is not great. A wonderful resource of GIS data is available from <a href='http://www.naturalearthdata.org'>Natural Earth Data</a>. I downloaded their quick start kit. First, we load the 10m cultural shapefile for states and provinces. It's got the whole world, so we'll obviously want to filter it down.\n\n<!--begin.rcode\nshp <- readOGR(\"C:/users/jarrodanderin/Documents/_RWork/_Datasets/Natural_Earth_quick_start/10m_cultural\",'ne_10m_admin_1_states_provinces_shp')\nhead(shp@data)#field with country is 'admin'\nshp <- shp[shp$admin=='United States of America' & shp$name!=\"Alaska\" & shp$name!=\"Hawaii\",]\nend.rcode-->\n\n<p>Plotting it using base r, we can see tht it is still missing the great lakes. so we'll download another layer for water bodies.</p>\n\n<!--begin.rcode fig.width=8, fig.height=5\nplot(shp)\nend.rcode-->\n\n<!--begin.rcode\nlakes <- readOGR(\"C:/users/jarrodanderin/Documents/_RWork/_Datasets/Natural_Earth_quick_start/10m_physical\",'ne_10m_lakes')\nlakes <- lakes[which(lakes$name_alt=='Great Lakes'),]\n\nend.rcode-->\n\n<p>Since we'll be doing a bunch of converting shapes to data frames, let's make a function out of that.</p>\n\n<!--begin.rcode\n\nshapeToDataFrame <- function(shape){\n  shape <- spTransform(shape,CRS(\"+proj=longlat +datum=WGS84 +no_defs +ellps=WGS84 +towgs84=0,0,0\"))\n  shape@data$id <- rownames(shape@data)\n  shape.points = fortify(shape,region='id')\n  shape.df = join(shape.points, shape@data, by='id')\n}\nshp.df <- shapeToDataFrame(shp)\nlakes.df <- shapeToDataFrame(lakes)\nend.rcode-->\n\n<p>Now we plot, since the great lakes should overlay the lines of Michigan, we'll plot the states first, then the lakes on top.</p>\n\n<!--begin.rcode fig.width=8, fig.height=5\nggplot()+\n  geom_polygon(data=shp.df,aes(long,lat,group=group,fill=name),color='black')+\n  geom_polygon(data=lakes.df,aes(long,lat,group=group),fill=\"Blue\")+\n  ggtitle(\"Map of the United States\")+\n  mapTheme+\n  coord_fixed()\nend.rcode-->\n\n<p>The projection on this makes the Great Lakes Region look ridiculous. Let's figure out how to limit the size of the map so that distortion is less of a problem. First, we create a vector of states in a given region. Then we filter the shp with that region to shrink our polygons of states to just those we care about.</p>\n\n<!--begin.rcode\ngreatlakesregion <- c(\"Minnesota\",\"Michigan\",\"Illinois\",\"Wisconsin\",\"Ohio\",\"Indiana\",\"Ohio\")##Don't want to bother with New England\nshp <- shp[which(shp$name %in% greatlakesregion),]\nshp.df <- shapeToDataFrame(shp)\nend.rcode-->\n\n<!--begin.rcode fig.width=8, fig.height=5\nggplot()+\n  geom_polygon(data=shp.df,aes(long,lat,group=group,fill=name),color='black')+\n  geom_polygon(data=lakes.df,aes(long,lat,group=group),fill=\"Blue\")+\n  ggtitle(\"Map of the United States\")+\n  mapTheme+\n  coord_fixed()\nend.rcode-->\n\n<p>now you were thinking that we would be doing both shapefiles and point data. For this section, we're going to use different datasets. We'll be looking at Divvy bike stations in Chicago. We get our shapefiles from <a href='http://www.cityofchicago.org/city/en/depts/doit/supp_info/gis_data.html'>Chicago's GIS repository.</a> We're going to use the city boundary layer, and the bike routes layer, and then we're going to plot the Divvy bike stations.</p>\n\n<!--begin.rcode\ncity <- readOGR(\"C:/users/jarrodanderin/Documents/_RWork/_Datasets/ChicagoGIS\",'City_Boundary')\ncity.df <- shapeToDataFrame(city)\nbikes <- readOGR(\"C:/users/jarrodanderin/Documents/_RWork/_Datasets/ChicagoGIS\",'Bike_Routes')\nbikes.df <- shapeToDataFrame(bikes)\ndivvy <- read.csv(\"C:/users/jarrodanderin/Documents/_RWork/_Datasets/Divvy_Stations_Trips_2013/Divvy_Stations_Trips_2013/Divvy_Stations_2013.csv\", stringsAsFactors=FALSE)\nend.rcode-->\n\n<!--begin.rcode fig.height=8, fig.width=8\nggplot()+\n  geom_polygon(data=city.df,aes(long,lat,group=group))+\n  geom_path(data=bikes.df,aes(long,lat,group=group))+\n  geom_point(data=divvy,aes(x=latitude,y=longitude),color='red')+\n  coord_fixed()\nend.rcode-->\n\n<p>What the hell? This is due to incorrect projection mapping. If we put the ggplot fomatting back in there and plot just the polygon, we can see our problem (if we realize the points are in latitude and longitude).</p>\n\n<!--begin.rcode fig.height=8, fig.width=8\nggplot(data=city.df,aes(long,lat,group=group))+geom_polygon()\nend.rcode-->\n\n<p>The x-y combo for the city map is in a different projection, so we need to convert the points to the appropriate projection (thanks to <a href='http://zevross.com/blog/2014/07/16/mapping-in-r-using-the-ggplot2-package/'>Zevross Blog</a> for this pointer).</p>\n\n<!--begin.rcode\nclass(divvy)\ncoordinates(divvy) <- ~longitude+latitude##Makes it into a spatialPointsDataFrame\nclass(divvy)\n##We assume that the lat and long are in NAD83 projection\nproj4string(divvy) <- CRS(\"+proj=longlat +datum=NAD83\")\ndivvy <- spTransform(divvy,CRS(\"+proj=longlat +datum=WGS84 +no_defs +ellps=WGS84 +towgs84=0,0,0\"))\ndivvy <- data.frame(divvy)##ggplot expects a datafrmae, not a spatialpoints dataframe\nend.rcode-->\n\n<p>Now we should be able to plot.</p>\n\n<!--begin.rcode fig.height=8, fig.width=8\nggplot()+\n  geom_polygon(data=city.df,aes(long,lat,group=group),fill=NA,color='black')+\n  geom_path(data=bikes.df,aes(long,lat,group=group),color='grey')+\n  geom_point(data=divvy,aes(longitude,latitude),color='red')+\n  #mapTheme+\n  coord_fixed()\nend.rcode-->\n\n<p>That worked, but its not very informative. We need to zoom in. Unfortunately, just using xlim and ylim excludes every line (i.e. bike path) that does not start and stop inside the boundaries of the plot. So we need to crop the lines and the polygons appropriately. We use some code copied from <a href='https://stat.ethz.ch/pipermail/r-sig-geo/2012-June/015340.html'>a mailing list</a>. We'll set this up as a function for clarity.</p>\n\n<!--begin.rcode\n#https://stat.ethz.ch/pipermail/r-sig-geo/2012-June/015340.html\n\n\ncropShapeToBB <- function(shape,boundingbox){\n  SP <- SpatialPolygons(list(Polygons(list(Polygon(bnds)), \"1\")),\n  proj4string=CRS(proj4string(shape)))##Match projection to the layer we're cropping\n  gI <- gIntersects(shape, SP, byid=TRUE)##Find intersection, and then go through and trim each line.\n  out <- vector(mode=\"list\", length=length(which(gI)))\n  ii <- 1\n  for (i in seq(along=gI)) if (gI[i]){out[[ii]] <- gIntersection(shape[i,], SP);\n      row.names(out[[ii]]) <- \n        row.names(shape)[i]; ii <- ii+1}\n    out1 <- do.call(\"rbind\", out)\n  return(out1)\n}\n\nbnds <- cbind(x=c(1150000,1150000,1190000,1190000,1150000),\n              y=c(1860000,1940000,1940000,1860000,1860000))##Draw a bounding box\n##Bounding box geometry has to match the original geometry of the shape to be cropped\n##This is kind of a pain, since our shape to dataframe function automatically chooses a new projection\nbike2 <- cropShapeToBB(bikes,bnds)\nbike2 <- SpatialLinesDataFrame(bike2,bikes@data)##Reassign the original data\nbikes.df <- shapeToDataFrame(bike2)\ncity2 <- cropShapeToBB(city,bnds)\ncity2 <- SpatialPolygonsDataFrame(city2,city@data)\ncity.df <- shapeToDataFrame(city2)\n\nggplot()+\n  geom_polygon(data=city.df,aes(long,lat,group=group),fill=NA,color='black')+\n  geom_path(data=bikes.df,aes(long,lat,group=group),color='grey')+\n  geom_point(data=divvy,aes(longitude,latitude),color='red')+\n  mapTheme+\n  coord_fixed()\nend.rcode-->\n\n<p>still pretty boring... let's get some other features added... maybe some water features and some parks? Let's also add detail about bike path types (finished or not). We want some detail in the legend for this final map, so for clarity, we want to include the legend (we make the title more clear).</p>\n\n<!--begin.rcode\nwater <- readOGR(\"C:/users/jarrodanderin/Documents/_RWork/_Datasets/ChicagoGIS\",'Hydro')\nwater2 <- cropShapeToBB(water,bnds)\n##Need to limit data to the rows saved in the cropped frame\nwater.data <- water[which(row.names(water) %in% row.names(water2)),]@data\nwater2 <- SpatialPolygonsDataFrame(water2,water.data)\nwater.df <- shapeToDataFrame(water2)\n\nparks <- readOGR(\"C:/users/jarrodanderin/Documents/_RWork/_Datasets/ChicagoGIS\",'parks')\nparks2 <- cropShapeToBB(parks,bnds)\nparks.data <- parks[which(row.names(parks) %in% row.names(parks2)),]@data\nparks2 <- SpatialPolygonsDataFrame(parks2,parks.data)\nparks.df <- shapeToDataFrame(parks2)\n\nbikes.df$Built <- 'Built'\nbikes.df$Built[grepl(\"PROPOSED\",bikes.df$BIKEROUTE)] <- \"Planned\"\n\nend.rcode-->\n\n<!--begin.rcode fig.width=8, fig.height=10\nggplot()+\n  geom_polygon(data=water.df,aes(long,lat,group=group),color='blue',fill='blue')+\n  #geom_polygon(data=city.df,aes(long,lat,group=group),fill=NA,color='black')+\n  geom_polygon(data=parks.df,aes(long,lat,group=group),fill='green',color='green')+\n  geom_path(data=bikes.df,aes(long,lat,group=group,linetype=Built),color='grey',size=1)+\n  geom_point(data=divvy,aes(longitude,latitude),color='red')+\n  ggtitle(\"Map of Chicago Divvy Stations and Bike Paths\")+\n  theme_bw()+\n    theme(panel.border=element_blank(),\n        panel.grid=element_blank(),\n        axis.text=element_blank(),\n        axis.text=element_blank(),\n        axis.ticks=element_blank(),\n        axis.title=element_blank())+\n  scale_linetype_discrete(name=\"Status of\\nBike path\")+\n  coord_fixed()\n\nend.rcode-->\n\n\n\n</body>\n</html>\n",
    "created" : 1425244503906.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "376186101",
    "id" : "DC636F0A",
    "lastKnownWriteTime" : 1425244556,
    "path" : "~/_RWork/GISTutorials/ReadInPlotPtsOnMap/ReadInPlotPtsOnMap.Rhtml",
    "project_path" : "ReadInPlotPtsOnMap/ReadInPlotPtsOnMap.Rhtml",
    "properties" : {
    },
    "source_on_save" : false,
    "type" : "r_html"
}