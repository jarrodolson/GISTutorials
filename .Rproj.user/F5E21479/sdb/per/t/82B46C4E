{
    "contents" : "<html>\n\n<head>\n<title>GIS Tutorial 2</title>\n</head>\n\n<body>\n\n<h1>Reading in Data from Raster</h1>\n<p>GIS data is often only available as a raster.</p>\n\n<!--begin.rcode\nrequire(ggplot2)\nrequire(rgdal)\nrequire(sp)\nrequire(raster)\nrequire(plyr)\n\nmapTheme <- theme_bw()+\n    theme(panel.border=element_blank(),\n        panel.grid=element_blank(),\n        axis.text=element_blank(),\n        axis.text=element_blank(),\n        axis.ticks=element_blank(),\n        axis.title=element_blank(),\n        legend.position='none')\n\nshapeToDataFrame <- function(shape){\n  shape <- spTransform(shape,CRS(\"+proj=longlat +datum=WGS84 +no_defs +ellps=WGS84 +towgs84=0,0,0\"))\n  shape@data$id <- rownames(shape@data)\n  shape.points = fortify(shape,region='id')\n  shape.df = join(shape.points, shape@data, by='id')\n}\nend.rcode-->\n\n<p>Reading in rasters is often as easy as the 'raster' command, but with other types of iles (i.e. those with projections incorporated), it might be necessary to use readGDAL</p>\n\n<!--begin.rcode\nmyraster <- raster(\"../_Datasets/Natural_Earth_quick_start/50m_raster/NE1_50M_SR_W/NE1_50M_SR_W.tif\")##Read raster - note: projection is wgs-84\nclass(myraster)\nprint(crs(myraster))\nend.rcode-->\n\n<!--begin.rcode fig.width=10, fig.height=7\nplot(myraster)\nend.rcode-->\n\n<p>This is a pretty big map, so let's make it more US focused... For examples sake, we will use a map with states in it, dissolve the states, and then use that to trim.</p>\n<!--begin.rcode fig.width=10,fig.height=8\n##Read in shape\nus <- readOGR('../_Datasets/Natural_Earth_quick_start/10m_cultural','ne_10m_admin_1_states_provinces_shp')\nus <- us[which(us$admin=='United States of America' & us$name!=\"Alaska\" & us$name!=\"Hawaii\"),]\n\n##first we dissolve\nus_new <- unionSpatialPolygons(us,IDs=us@data$admin)\n##Create a dataframe with the same names as the polygons in the dissolved object\nus_new.data <- as.data.frame(unique(us@data$admin),stringsAsFactors=FALSE)\ncolnames(us_new.data) <- 'admin'\nrownames(us_new.data) <- us_new.data$admin\nus_new <- SpatialPolygonsDataFrame(us_new,us_new.data)##New shape file\n\nplot(us_new)\nend.rcode-->\n\n<!--begin.rcode fig.width=10, fig.height=8\nmyraster.crop <- crop(myraster,extent(us_new),snap='out')##Crop raster to extent of shape\nplot(myraster.crop)\nend.rcode-->\n\n<!--begin.rcode fig.width=10, fig.height=8\ncrop <- setValues(myraster.crop,NA)#Create new shape file with values==0 from raster\nus.r <- rasterize(us,crop)\nmyraster.masked <- mask(myraster.crop,us.r)##Use raster to make merging easier\nmap.p <- rasterToPoints(myraster.masked)\ndf <- data.frame(map.p)\ncolnames(df) <- c(\"Longitude\",\"Latitude\",\"MAP\")\nstates.df <- shapeToDataFrame(us)\nggplot()+\n  geom_raster(data=df, aes(x=Longitude,y=Latitude,fill=MAP))+\n  geom_polygon(data=states.df, aes(x=long,y=lat,group=group),fill=NA,color='black')+\n  coord_fixed()+mapTheme\nend.rcode-->\n<p>Let's dive in even closer - Washington\n<!--begin.rcode fig.width=10, fig.height=8\ncropRasterToShape <- function(myRaster,myshape){\n  myraster.crop <- crop(myraster,extent(myshape),snap='out')##Crop raster to extent of shape\n  crop <- setValues(myraster.crop,NA)#Create new shape file with values==0 from raster\n  myshape.r <- rasterize(myshape,crop)\n  myraster.masked <- mask(myraster.crop,myshape.r)##Use raster to make merging easier\n  return(myraster.masked)\n}\n  \nprepRasterToPlot <- function(myraster){\n  map.p <- rasterToPoints(myraster)\n  df <- data.frame(map.p)\n  colnames(df) <- c(\"Longitude\",\"Latitude\",\"MAP\")\n  return(df)\n}\n\nwa <- us[which(us$name==\"Washington\"),]\nwa.df <- shapeToDataFrame(wa)\nwa.r <- cropRasterToShape(us.r,wa)\nwa.df.r <- prepRasterToPlot(wa.r)\nmarine <- readOGR('../_Datasets/Natural_Earth_quick_start/10m_physical','ne_10m_geography_marine_polys')\npsount <- marine[which(marine@data$name %in% c(\"Puget Sound\",\"Strait of Juan de Fuca\", \"Rosario Strait\",\"Bellingham Bay\",\"Padilla Bay\")),]\n\npsound.df <- shapeToDataFrame(psount)\nrivers <- readOGR('../_Datasets/Natural_Earth_quick_start/10m_physical','ne_10m_rivers_lake_centerlines')\nrivers.wa <- gIntersection(rivers, wa)\nrivers.wa.data <- as.data.frame(unique(rivers@data),stringsAsFactors=FALSE)\n\nrivers.wa <- SpatialLinesDataFrame(rivers.wa,rivers.wa.data)\nrivers.wa.df <- shapeToDataFrame(rivers.wa)\n\nlakes <- readOGR('../_Datasets/Natural_Earth_quick_start/10m_physical','ne_10m_lakes')\nlakes.wa <- gIntersection(lakes,wa,byid=TRUE)##Necessary for multiple polygons\ntemp <- sapply(slot(lakes.wa, \"polygons\"), function(x) slot(x, \"ID\"))\ntemp2 <- c()\nfor(el in temp){\n  temp2 <- c(temp2,strsplit(el,\" \")[[1]])\n}\nlakes.wa.data <- as.data.frame(lakes@data,stringsAsFactors=FALSE)\n#lakes.wa.data$Insample <- as.vector(gIntersects(lakes,wa,byid=TRUE))\nlakes.wa.data <- lakes.wa.data[which(rownames(lakes.wa.data) %in% temp2),]\n#lakes.wa.data <- lakes.wa.data[which(rownames(lakes.wa.data) %in% rownames(lakes.wa)),]\nlakes.wa <- SpatialPolygonsDataFrame(lakes.wa,lakes.wa.data,match.ID=FALSE)\nlakes.wa.df <- shapetoDataFrame(lakes.wa)\n\nregions <- readOGR('../_Datasets/Natural_Earth_quick_start/10m_physical','ne_10m_geography_regions_polys')\nregions.wa <- gIntersection(regions,wa,byid=TRUE)\ntemp <- sapply(slot(regions.wa,\"polygons\"), function(x) slot(x, 'ID'))\ntemp2 <- c()\nfor(el in temp){\n  temp2 <- c(temp2,strsplit(el,' ')[[1]])\n}\nregions.wa.data <- as.data.frame(regions@data,stringsAsFactors=FALSE)\nregions.wa.data <- regions.wa.data[which(rownames(regions.wa.data) %in% temp2),]\nregions.wa <- SpatialPolygonsDataFrame(regions.wa,regions.wa.data, match.ID=FALSE)\nregions.wa.df <- shapeToDataFrame(regions.wa)\n\nggplot()+\n  geom_raster(data=wa.df.r, aes(x=Longitude, y=Latitude, fill=MAP))+\n  geom_polygon(data=wa, aes(x=long,y=lat,group=group),fill=NA,color='black')+\n  geom_path(data=rivers.wa.df, aes(x=long,y=lat,group=group), fill=\"Blue\",color=\"Blue\")+\n  geom_polygon(data=lakes.wa.df, aes(x=long,y=lat,group=group),fill='blue')+\n  geom_polygon(data=regions.wa.df, aes(x=long,y=lat,group=group),fill=NA,color='black')+\n  scale_fill_continuous(name=\"Relief\",low=\"#006400\",high=\"white\")+\n  theme(panel.background=element_rect(fill='Blue'),\n        panel.grid=element_blank())\nend.rcode-->\n\n\n</body>\n</html>\n",
    "created" : 1425371396639.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "1856974122",
    "id" : "82B46C4E",
    "lastKnownWriteTime" : 1425639408,
    "path" : "~/_RWork/GISTutorials/ReadInRasterPlot/ReadInRasterPlot.Rhtml",
    "project_path" : "ReadInRasterPlot/ReadInRasterPlot.Rhtml",
    "properties" : {
    },
    "source_on_save" : false,
    "type" : "r_html"
}